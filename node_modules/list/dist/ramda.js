"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ramda_1 = /*#__PURE__*/require("ramda");
var L = /*#__PURE__*/require("./index");
var index_1 = /*#__PURE__*/require("./index");
exports.Node = index_1.Node;
exports.List = index_1.List;
exports.list = index_1.list;
exports.prepend = /*#__PURE__*/ramda_1.curry(L.prepend);
exports.isList = /*#__PURE__*/ramda_1.curry(L.isList);
exports.append = /*#__PURE__*/ramda_1.curry(L.append);
exports.of = /*#__PURE__*/ramda_1.curry(L.of);
exports.pair = /*#__PURE__*/ramda_1.curry(L.pair);
exports.empty = /*#__PURE__*/ramda_1.curry(L.empty);
exports.repeat = /*#__PURE__*/ramda_1.curry(L.repeat);
exports.times = /*#__PURE__*/ramda_1.curry(L.times);
exports.length = /*#__PURE__*/ramda_1.curry(L.length);
exports.first = /*#__PURE__*/ramda_1.curry(L.first);
exports.last = /*#__PURE__*/ramda_1.curry(L.last);
exports.nth = /*#__PURE__*/ramda_1.curry(L.nth);
exports.map = /*#__PURE__*/ramda_1.curry(L.map);
exports.forEach = /*#__PURE__*/ramda_1.curry(L.forEach);
exports.pluck = /*#__PURE__*/ramda_1.curry(L.pluck);
exports.range = /*#__PURE__*/ramda_1.curry(L.range);
exports.foldl = /*#__PURE__*/ramda_1.curry(L.foldl);
exports.reduce = exports.foldl;
exports.filter = /*#__PURE__*/ramda_1.curry(L.filter);
exports.reject = /*#__PURE__*/ramda_1.curry(L.reject);
exports.partition = /*#__PURE__*/ramda_1.curry(L.partition);
exports.join = /*#__PURE__*/ramda_1.curry(L.join);
exports.foldr = /*#__PURE__*/ramda_1.curry(L.foldr);
exports.reduceRight = exports.foldr;
exports.ap = /*#__PURE__*/ramda_1.curry(L.ap);
exports.chain = /*#__PURE__*/ramda_1.curry(L.chain);
exports.flatten = /*#__PURE__*/ramda_1.curry(L.flatten);
exports.every = /*#__PURE__*/ramda_1.curry(L.every);
exports.all = exports.every;
exports.some = /*#__PURE__*/ramda_1.curry(L.some);
exports.any = exports.some;
exports.none = /*#__PURE__*/ramda_1.curry(L.none);
exports.find = /*#__PURE__*/ramda_1.curry(L.find);
exports.indexOf = /*#__PURE__*/ramda_1.curry(L.indexOf);
exports.findIndex = /*#__PURE__*/ramda_1.curry(L.findIndex);
exports.includes = /*#__PURE__*/ramda_1.curry(L.includes);
exports.contains = exports.includes;
exports.equals = /*#__PURE__*/ramda_1.curry(L.equals);
exports.concat = /*#__PURE__*/ramda_1.curry(L.concat);
exports.update = /*#__PURE__*/ramda_1.curry(L.update);
exports.adjust = /*#__PURE__*/ramda_1.curry(L.adjust);
exports.slice = /*#__PURE__*/ramda_1.curry(L.slice);
exports.take = /*#__PURE__*/ramda_1.curry(L.take);
exports.takeWhile = /*#__PURE__*/ramda_1.curry(L.takeWhile);
exports.dropWhile = /*#__PURE__*/ramda_1.curry(L.dropWhile);
exports.takeLast = /*#__PURE__*/ramda_1.curry(L.takeLast);
exports.splitAt = /*#__PURE__*/ramda_1.curry(L.splitAt);
exports.remove = /*#__PURE__*/ramda_1.curry(L.remove);
exports.reverse = /*#__PURE__*/ramda_1.curry(L.reverse);
exports.drop = /*#__PURE__*/ramda_1.curry(L.drop);
exports.dropLast = /*#__PURE__*/ramda_1.curry(L.dropLast);
exports.pop = /*#__PURE__*/ramda_1.curry(L.pop);
exports.init = exports.pop;
exports.tail = /*#__PURE__*/ramda_1.curry(L.tail);
exports.toArray = /*#__PURE__*/ramda_1.curry(L.toArray);
exports.fromArray = /*#__PURE__*/ramda_1.curry(L.fromArray);
exports.fromIterable = /*#__PURE__*/ramda_1.curry(L.fromIterable);
exports.insert = /*#__PURE__*/ramda_1.curry(L.insert);
exports.insertAll = /*#__PURE__*/ramda_1.curry(L.insertAll);
exports.zip = /*#__PURE__*/ramda_1.curry(L.zip);
exports.zipWith = /*#__PURE__*/ramda_1.curry(L.zipWith);
exports.sort = /*#__PURE__*/ramda_1.curry(L.sort);
exports.sortWith = /*#__PURE__*/ramda_1.curry(L.sortWith);
exports.sortBy = /*#__PURE__*/ramda_1.curry(L.sortBy);