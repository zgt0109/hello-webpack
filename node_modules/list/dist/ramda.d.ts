/// <reference types="ramda" />
import { CurriedFunction2 } from "ramda";
import * as L from "./index";
export { Node, List, list } from "./index";
export declare const prepend: (...a: any[]) => any;
export declare const isList: CurriedFunction2<{}, {}, boolean>;
export declare const append: (...a: any[]) => any;
export declare const of: CurriedFunction2<{}, {}, L.List<{}>>;
export declare const pair: CurriedFunction2<{}, {}, L.List<{}>>;
export declare const empty: CurriedFunction2<{}, {}, L.List<any>>;
export declare const repeat: (...a: any[]) => any;
export declare const times: (...a: any[]) => any;
export declare const length: CurriedFunction2<L.List<any>, {}, number>;
export declare const first: (...a: any[]) => any;
export declare const last: (...a: any[]) => any;
export declare const nth: (...a: any[]) => any;
export declare const map: (...a: any[]) => any;
export declare const forEach: (...a: any[]) => any;
export declare const pluck: (...a: any[]) => any;
export declare const range: CurriedFunction2<number, number, L.List<number>>;
export declare const foldl: (...a: any[]) => any;
export declare const reduce: (...a: any[]) => any;
export declare const filter: CurriedFunction2<(a: {}) => boolean, L.List<{}>, L.List<{}>>;
export declare const reject: (...a: any[]) => any;
export declare const partition: (...a: any[]) => any;
export declare const join: CurriedFunction2<string, L.List<string>, string>;
export declare const foldr: (...a: any[]) => any;
export declare const reduceRight: (...a: any[]) => any;
export declare const ap: (...a: any[]) => any;
export declare const chain: (...a: any[]) => any;
export declare const flatten: (...a: any[]) => any;
export declare const every: (...a: any[]) => any;
export declare const all: (...a: any[]) => any;
export declare const some: (...a: any[]) => any;
export declare const any: (...a: any[]) => any;
export declare const none: (...a: any[]) => any;
export declare const find: (...a: any[]) => any;
export declare const indexOf: (...a: any[]) => any;
export declare const findIndex: (...a: any[]) => any;
export declare const includes: (...a: any[]) => any;
export declare const contains: (...a: any[]) => any;
export declare const equals: (...a: any[]) => any;
export declare const concat: (...a: any[]) => any;
export declare const update: (...a: any[]) => any;
export declare const adjust: (...a: any[]) => any;
export declare const slice: (...a: any[]) => any;
export declare const take: (...a: any[]) => any;
export declare const takeWhile: (...a: any[]) => any;
export declare const dropWhile: (...a: any[]) => any;
export declare const takeLast: (...a: any[]) => any;
export declare const splitAt: (...a: any[]) => any;
export declare const remove: (...a: any[]) => any;
export declare const reverse: (...a: any[]) => any;
export declare const drop: (...a: any[]) => any;
export declare const dropLast: (...a: any[]) => any;
export declare const pop: (...a: any[]) => any;
export declare const init: (...a: any[]) => any;
export declare const tail: (...a: any[]) => any;
export declare const toArray: (...a: any[]) => any;
export declare const fromArray: (...a: any[]) => any;
export declare const fromIterable: (...a: any[]) => any;
export declare const insert: (...a: any[]) => any;
export declare const insertAll: (...a: any[]) => any;
export declare const zip: (...a: any[]) => any;
export declare const zipWith: (...a: any[]) => any;
export declare const sort: (...a: any[]) => any;
export declare const sortWith: (...a: any[]) => any;
export declare const sortBy: (...a: any[]) => any;
