import * as L from "./index";
export { Node, List, list, isList, length, of, empty, first, last, flatten, pop, init, tail, fromArray, toArray, reverse, fromIterable, sort, group, dropRepeats } from "./index";
function curry2(f) {
    return function curried(a, b) {
        return arguments.length === 2 ? f(a, b) : function (b) {
            return f(a, b);
        };
    };
}
function curry3(f) {
    return function curried(a, b, c) {
        switch (arguments.length) {
            case 3:
                return f(a, b, c);
            case 2:
                return function (c) {
                    return f(a, b, c);
                };
            default:
                return curry2(function (b, c) {
                    return f(a, b, c);
                });
        }
    };
}
export var prepend = /*#__PURE__*/curry2(L.prepend);
export var append = /*#__PURE__*/curry2(L.append);
export var pair = /*#__PURE__*/curry2(L.pair);
export var repeat = /*#__PURE__*/curry2(L.repeat);
export var times = /*#__PURE__*/curry2(L.times);
export var nth = /*#__PURE__*/curry2(L.nth);
export var map = /*#__PURE__*/curry2(L.map);
export var forEach = /*#__PURE__*/curry2(L.forEach);
export var pluck = /*#__PURE__*/curry2(L.pluck);
export var intersperse = /*#__PURE__*/curry2(L.intersperse);
export var range = /*#__PURE__*/curry2(L.range);
export var filter = /*#__PURE__*/curry2(L.filter);
export var reject = /*#__PURE__*/curry2(L.reject);
export var partition = /*#__PURE__*/curry2(L.partition);
export var join = /*#__PURE__*/curry2(L.join);
export var ap = /*#__PURE__*/curry2(L.ap);
export var chain = /*#__PURE__*/curry2(L.chain);
export var every = /*#__PURE__*/curry2(L.every);
export var all = /*#__PURE__*/curry2(L.all);
export var some = /*#__PURE__*/curry2(L.some);
export var any = /*#__PURE__*/curry2(L.any);
export var none = /*#__PURE__*/curry2(L.none);
export var find = /*#__PURE__*/curry2(L.find);
export var findLast = /*#__PURE__*/curry2(L.findLast);
export var indexOf = /*#__PURE__*/curry2(L.indexOf);
export var lastIndexOf = /*#__PURE__*/curry2(L.lastIndexOf);
export var findIndex = /*#__PURE__*/curry2(L.findIndex);
export var includes = /*#__PURE__*/curry2(L.includes);
export var contains = includes;
export var equals = /*#__PURE__*/curry2(L.equals);
export var concat = /*#__PURE__*/curry2(L.concat);
export var take = /*#__PURE__*/curry2(L.take);
export var takeLast = /*#__PURE__*/curry2(L.takeLast);
export var drop = /*#__PURE__*/curry2(L.drop);
export var dropRepeatsWith = /*#__PURE__*/curry2(L.groupWith);
export var dropLast = /*#__PURE__*/curry2(L.dropLast);
export var takeWhile = /*#__PURE__*/curry2(L.takeWhile);
export var takeLastWhile = /*#__PURE__*/curry2(L.takeLastWhile);
export var dropWhile = /*#__PURE__*/curry2(L.dropWhile);
export var splitAt = /*#__PURE__*/curry2(L.splitAt);
export var splitWhen = /*#__PURE__*/curry2(L.splitWhen);
export var splitEvery = /*#__PURE__*/curry2(L.splitEvery);
export var sortBy = /*#__PURE__*/curry2(L.sortBy);
export var sortWith = /*#__PURE__*/curry2(L.sortWith);
export var groupWith = /*#__PURE__*/curry2(L.groupWith);
export var zip = /*#__PURE__*/curry2(L.zip);
export var foldl = /*#__PURE__*/curry3(L.foldl);
export var reduce = foldl;
export var scan = /*#__PURE__*/curry3(L.scan);
export var foldr = /*#__PURE__*/curry3(L.foldr);
export var equalsWith = /*#__PURE__*/curry3(L.equalsWith);
export var reduceRight = foldr;
export var update = /*#__PURE__*/curry3(L.update);
export var adjust = /*#__PURE__*/curry3(L.adjust);
export var slice = /*#__PURE__*/curry3(L.slice);
export var remove = /*#__PURE__*/curry3(L.remove);
export var insert = /*#__PURE__*/curry3(L.insert);
export var insertAll = /*#__PURE__*/curry3(L.insertAll);
export var zipWith = /*#__PURE__*/curry3(L.zipWith);