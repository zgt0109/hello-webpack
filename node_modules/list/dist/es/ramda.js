import { curry } from "ramda";
import * as L from "./index";
export { Node, List, list } from "./index";
export var prepend = /*#__PURE__*/curry(L.prepend);
export var isList = /*#__PURE__*/curry(L.isList);
export var append = /*#__PURE__*/curry(L.append);
export var of = /*#__PURE__*/curry(L.of);
export var pair = /*#__PURE__*/curry(L.pair);
export var empty = /*#__PURE__*/curry(L.empty);
export var repeat = /*#__PURE__*/curry(L.repeat);
export var times = /*#__PURE__*/curry(L.times);
export var length = /*#__PURE__*/curry(L.length);
export var first = /*#__PURE__*/curry(L.first);
export var last = /*#__PURE__*/curry(L.last);
export var nth = /*#__PURE__*/curry(L.nth);
export var map = /*#__PURE__*/curry(L.map);
export var forEach = /*#__PURE__*/curry(L.forEach);
export var pluck = /*#__PURE__*/curry(L.pluck);
export var range = /*#__PURE__*/curry(L.range);
export var foldl = /*#__PURE__*/curry(L.foldl);
export var reduce = foldl;
export var filter = /*#__PURE__*/curry(L.filter);
export var reject = /*#__PURE__*/curry(L.reject);
export var partition = /*#__PURE__*/curry(L.partition);
export var join = /*#__PURE__*/curry(L.join);
export var foldr = /*#__PURE__*/curry(L.foldr);
export var reduceRight = foldr;
export var ap = /*#__PURE__*/curry(L.ap);
export var chain = /*#__PURE__*/curry(L.chain);
export var flatten = /*#__PURE__*/curry(L.flatten);
export var every = /*#__PURE__*/curry(L.every);
export var all = every;
export var some = /*#__PURE__*/curry(L.some);
export var any = some;
export var none = /*#__PURE__*/curry(L.none);
export var find = /*#__PURE__*/curry(L.find);
export var indexOf = /*#__PURE__*/curry(L.indexOf);
export var findIndex = /*#__PURE__*/curry(L.findIndex);
export var includes = /*#__PURE__*/curry(L.includes);
export var contains = includes;
export var equals = /*#__PURE__*/curry(L.equals);
export var concat = /*#__PURE__*/curry(L.concat);
export var update = /*#__PURE__*/curry(L.update);
export var adjust = /*#__PURE__*/curry(L.adjust);
export var slice = /*#__PURE__*/curry(L.slice);
export var take = /*#__PURE__*/curry(L.take);
export var takeWhile = /*#__PURE__*/curry(L.takeWhile);
export var dropWhile = /*#__PURE__*/curry(L.dropWhile);
export var takeLast = /*#__PURE__*/curry(L.takeLast);
export var splitAt = /*#__PURE__*/curry(L.splitAt);
export var remove = /*#__PURE__*/curry(L.remove);
export var reverse = /*#__PURE__*/curry(L.reverse);
export var drop = /*#__PURE__*/curry(L.drop);
export var dropLast = /*#__PURE__*/curry(L.dropLast);
export var pop = /*#__PURE__*/curry(L.pop);
export var init = pop;
export var tail = /*#__PURE__*/curry(L.tail);
export var toArray = /*#__PURE__*/curry(L.toArray);
export var fromArray = /*#__PURE__*/curry(L.fromArray);
export var fromIterable = /*#__PURE__*/curry(L.fromIterable);
export var insert = /*#__PURE__*/curry(L.insert);
export var insertAll = /*#__PURE__*/curry(L.insertAll);
export var zip = /*#__PURE__*/curry(L.zip);
export var zipWith = /*#__PURE__*/curry(L.zipWith);
export var sort = /*#__PURE__*/curry(L.sort);
export var sortWith = /*#__PURE__*/curry(L.sortWith);
export var sortBy = /*#__PURE__*/curry(L.sortBy);