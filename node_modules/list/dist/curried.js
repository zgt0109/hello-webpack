"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var L = /*#__PURE__*/require("./index");
var index_1 = /*#__PURE__*/require("./index");
exports.Node = index_1.Node;
exports.List = index_1.List;
exports.list = index_1.list;
exports.isList = index_1.isList;
exports.length = index_1.length;
exports.of = index_1.of;
exports.empty = index_1.empty;
exports.first = index_1.first;
exports.last = index_1.last;
exports.flatten = index_1.flatten;
exports.pop = index_1.pop;
exports.init = index_1.init;
exports.tail = index_1.tail;
exports.fromArray = index_1.fromArray;
exports.toArray = index_1.toArray;
exports.reverse = index_1.reverse;
exports.fromIterable = index_1.fromIterable;
exports.sort = index_1.sort;
exports.group = index_1.group;
exports.dropRepeats = index_1.dropRepeats;
function curry2(f) {
    return function curried(a, b) {
        return arguments.length === 2 ? f(a, b) : function (b) {
            return f(a, b);
        };
    };
}
function curry3(f) {
    return function curried(a, b, c) {
        switch (arguments.length) {
            case 3:
                return f(a, b, c);
            case 2:
                return function (c) {
                    return f(a, b, c);
                };
            default:
                return curry2(function (b, c) {
                    return f(a, b, c);
                });
        }
    };
}
exports.prepend = /*#__PURE__*/curry2(L.prepend);
exports.append = /*#__PURE__*/curry2(L.append);
exports.pair = /*#__PURE__*/curry2(L.pair);
exports.repeat = /*#__PURE__*/curry2(L.repeat);
exports.times = /*#__PURE__*/curry2(L.times);
exports.nth = /*#__PURE__*/curry2(L.nth);
exports.map = /*#__PURE__*/curry2(L.map);
exports.forEach = /*#__PURE__*/curry2(L.forEach);
exports.pluck = /*#__PURE__*/curry2(L.pluck);
exports.intersperse = /*#__PURE__*/curry2(L.intersperse);
exports.range = /*#__PURE__*/curry2(L.range);
exports.filter = /*#__PURE__*/curry2(L.filter);
exports.reject = /*#__PURE__*/curry2(L.reject);
exports.partition = /*#__PURE__*/curry2(L.partition);
exports.join = /*#__PURE__*/curry2(L.join);
exports.ap = /*#__PURE__*/curry2(L.ap);
exports.chain = /*#__PURE__*/curry2(L.chain);
exports.every = /*#__PURE__*/curry2(L.every);
exports.all = /*#__PURE__*/curry2(L.all);
exports.some = /*#__PURE__*/curry2(L.some);
exports.any = /*#__PURE__*/curry2(L.any);
exports.none = /*#__PURE__*/curry2(L.none);
exports.find = /*#__PURE__*/curry2(L.find);
exports.findLast = /*#__PURE__*/curry2(L.findLast);
exports.indexOf = /*#__PURE__*/curry2(L.indexOf);
exports.lastIndexOf = /*#__PURE__*/curry2(L.lastIndexOf);
exports.findIndex = /*#__PURE__*/curry2(L.findIndex);
exports.includes = /*#__PURE__*/curry2(L.includes);
exports.contains = exports.includes;
exports.equals = /*#__PURE__*/curry2(L.equals);
exports.concat = /*#__PURE__*/curry2(L.concat);
exports.take = /*#__PURE__*/curry2(L.take);
exports.takeLast = /*#__PURE__*/curry2(L.takeLast);
exports.drop = /*#__PURE__*/curry2(L.drop);
exports.dropRepeatsWith = /*#__PURE__*/curry2(L.groupWith);
exports.dropLast = /*#__PURE__*/curry2(L.dropLast);
exports.takeWhile = /*#__PURE__*/curry2(L.takeWhile);
exports.takeLastWhile = /*#__PURE__*/curry2(L.takeLastWhile);
exports.dropWhile = /*#__PURE__*/curry2(L.dropWhile);
exports.splitAt = /*#__PURE__*/curry2(L.splitAt);
exports.splitWhen = /*#__PURE__*/curry2(L.splitWhen);
exports.splitEvery = /*#__PURE__*/curry2(L.splitEvery);
exports.sortBy = /*#__PURE__*/curry2(L.sortBy);
exports.sortWith = /*#__PURE__*/curry2(L.sortWith);
exports.groupWith = /*#__PURE__*/curry2(L.groupWith);
exports.zip = /*#__PURE__*/curry2(L.zip);
exports.foldl = /*#__PURE__*/curry3(L.foldl);
exports.reduce = exports.foldl;
exports.scan = /*#__PURE__*/curry3(L.scan);
exports.foldr = /*#__PURE__*/curry3(L.foldr);
exports.equalsWith = /*#__PURE__*/curry3(L.equalsWith);
exports.reduceRight = exports.foldr;
exports.update = /*#__PURE__*/curry3(L.update);
exports.adjust = /*#__PURE__*/curry3(L.adjust);
exports.slice = /*#__PURE__*/curry3(L.slice);
exports.remove = /*#__PURE__*/curry3(L.remove);
exports.insert = /*#__PURE__*/curry3(L.insert);
exports.insertAll = /*#__PURE__*/curry3(L.insertAll);
exports.zipWith = /*#__PURE__*/curry3(L.zipWith);